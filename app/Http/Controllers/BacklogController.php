<?php

namespace App\Http\Controllers;

use App\Models\Backlog;
use Illuminate\Http\Request;

class BacklogController extends Controller
{
    /**
     * Afficher la liste des t√¢ches dans une vue (avec filtres, tri et pagination)
     */
    public function showAllView()
    {
        // Pr√©parer la requ√™te sur le mod√®le Backlog
        $query = Backlog::query();

        //  Si l'utilisateur filtre par priorit√© (ex: haute, moyenne, faible)
        if (request('priorite')) {
            $query->where('priorite', request('priorite'));
        }

        //  Si l'utilisateur filtre par statut (ex: √† faire, en cours, termin√©)
        if (request('statut')) {
            $query->where('statut', request('statut'));
        }

        //  Tri par date d'√©ch√©ance si l'utilisateur choisit (asc ou desc)
        if (request('sort') === 'asc') {
            $query->orderBy('date_echeance', 'asc');
        } elseif (request('sort') === 'desc') {
            $query->orderBy('date_echeance', 'desc');
        }

        //  Pagination des r√©sultats : 5 t√¢ches par page
        $backlogs = $query->paginate(5);

        // üß∑ Garde les filtres dans l'URL m√™me quand on change de page
        $backlogs->appends(request()->query());

        // Retourner la vue Blade avec les donn√©es
        return view('backlogs', compact('backlogs'));
    }

    /**
     * API : Retourne tous les backlogs au format JSON
     */
    public function index()
    {
        $backlogs = Backlog::all();
        return response()->json($backlogs);
    }

    /**
     * API : Cr√©er une nouvelle t√¢che dans le backlog
     */
    public function store(Request $request)
    {
        //  Validation des champs envoy√©s depuis un formulaire ou API
        $validated = $request->validate([
            'project_id'     => 'required|integer',
            'titre'          => 'required|string|max:255',
            'description'    => 'nullable|string',
            'priorite'       => 'required|in:haute,moyenne,faible',
            'statut'         => 'required|string',
            'date_echeance'  => 'nullable|date',
        ]);

        //  Cr√©ation de la t√¢che dans la base de donn√©es
        $backlog = Backlog::create($validated);

        //  R√©ponse JSON avec code 201 (cr√©√© avec succ√®s)
        return response()->json($backlog, 201);
    }

    /**
     * API : Afficher une t√¢che sp√©cifique par son ID
     */
    public function show($id)
    {
        //  Chercher la t√¢che sinon erreur 404
        $backlog = Backlog::findOrFail($id);
        return response()->json($backlog);
    }

    /**
     * API : Mettre √† jour une t√¢che existante
     */
    public function update(Request $request, $id)
    {
        //  Chercher la t√¢che √† modifier
        $backlog = Backlog::findOrFail($id);

        //  Revalidation des champs avant modification
        $validated = $request->validate([
            'project_id'     => 'required|integer',
            'titre'          => 'required|string|max:255',
            'description'    => 'nullable|string',
            'priorite'       => 'required|in:haute,moyenne,faible',
            'statut'         => 'required|string',
            'date_echeance'  => 'nullable|date',
        ]);

        //  Mise √† jour des donn√©es dans la base
        $backlog->update($validated);

        //  R√©ponse JSON avec la t√¢che mise √† jour
        return response()->json($backlog);
    }

    /**
     * API : Supprimer une t√¢che
     */
    public function destroy($id)
    {
        // üîç V√©rifie si la t√¢che existe, sinon erreur 404
        $backlog = Backlog::findOrFail($id);

        // Supprime la t√¢che
        $backlog->delete();

        //  R√©ponse JSON de confirmation
        return response()->json(['message' => 'T√¢che supprim√©e avec succ√®s']);
    }
}
