<?php

namespace App\Http\Controllers;

use App\Models\Backlog;
use Illuminate\Http\Request;

class BacklogController extends Controller
{
    /**
     * üéØ Afficher la liste des t√¢ches dans une vue (avec filtres, tri et pagination)
     */
    public function showAllView()
    {
        $query = Backlog::query();

        // üîç Filtrage par priorit√©
        if (request('priorite')) {
            $query->where('priorite', request('priorite'));
        }

        // üîç Filtrage par statut
        if (request('statut')) {
            $query->where('statut', request('statut'));
        }

        // üìÖ Tri par date d'√©ch√©ance
        if (request('sort') === 'asc') {
            $query->orderBy('date_echeance', 'asc');
        } elseif (request('sort') === 'desc') {
            $query->orderBy('date_echeance', 'desc');
        }

        // üìÑ Pagination (5 r√©sultats par page)
        $backlogs = $query->paginate(5);

        // üîÅ Garde les param√®tres de filtre lors de la navigation
        $backlogs->appends(request()->query());

        return view('backlogs', compact('backlogs'));
    }

    /**
     * üîÅ Retourne tous les backlogs en JSON (API)
     */
    public function index()
    {
        $backlogs = Backlog::all();
        return response()->json($backlogs);
    }

    /**
     * ‚ûï Cr√©er une nouvelle t√¢che
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'project_id'     => 'required|integer',
            'titre'          => 'required|string|max:255',
            'description'    => 'nullable|string',
            'priorite'       => 'required|in:haute,moyenne,faible',
            'statut'         => 'required|string',
            'date_echeance'  => 'nullable|date',
        ]);

        $backlog = Backlog::create($validated);
        return response()->json($backlog, 201);
    }

    /**
     * üìÑ Afficher une t√¢che sp√©cifique par ID (API)
     */
    public function show($id)
    {
        $backlog = Backlog::findOrFail($id);
        return response()->json($backlog);
    }

    /**
     * üõ†Ô∏è Modifier une t√¢che
     */
    public function update(Request $request, $id)
    {
        $backlog = Backlog::findOrFail($id);

        $validated = $request->validate([
            'project_id'     => 'required|integer',
            'titre'          => 'required|string|max:255',
            'description'    => 'nullable|string',
            'priorite'       => 'required|in:haute,moyenne,faible',
            'statut'         => 'required|string',
            'date_echeance'  => 'nullable|date',
        ]);

        $backlog->update($validated);
        return response()->json($backlog);
    }

    /**
     * ‚ùå Supprimer une t√¢che
     */
    public function destroy($id)
    {
        $backlog = Backlog::findOrFail($id);
        $backlog->delete();

        return response()->json(['message' => 'T√¢che supprim√©e avec succ√®s']);
    }
}
